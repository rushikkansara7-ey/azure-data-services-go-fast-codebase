alter table [TaskTypeMapping] drop column [TaskDatafactoryIR]

GO

delete from TaskTypeMapping where TaskTypeMappingId <= 34

SET IDENTITY_INSERT [dbo].[TaskTypeMapping] ON 
GO
INSERT [dbo].[TaskTypeMapping] ([TaskTypeMappingId], [TaskTypeId], [MappingType], [MappingName], [SourceSystemType], [SourceType], [TargetSystemType], [TargetType], [TaskTypeJson], [ActiveYN], [TaskMasterJsonSchema], [TaskInstanceJsonSchema]) VALUES (1, 1, N'ADF', N'GPL_AzureBlobStorage_Excel_AzureSqlTable_NA', N'Azure Blob', N'Excel', N'Azure SQL', N'Table', NULL, 1, N'{     "$schema": "http://json-schema.org/draft-04/schema#",     "type": "object",     "title": "TaskMasterJson",     "properties": {         "Source": {             "type": "object",             "properties": {                 "Type": {                     "type": "string",                                         "enum": [                         "Excel"                     ],                      "options":{                         "hidden": true                     }                 },                 "RelativePath": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "eg. AwSample/dbo/Customer/{yyyy}/{MM}/{dd}/{hh}/"                         },                         "infoText": "Path of the file to be imported."                     }                 },                 "DataFileName": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "eg. Customer.xlsx"                         },                         "infoText": "Name of the file to be imported."                     }                 },                 "SchemaFileName": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "eg. Customer.json"                         },                         "infoText": "Name of the schema file to create. Generally this is the same name as your DataFileName but with a .json extension."                     }                 },                 "FirstRowAsHeader": {                     "type": "string",                     "enum": [                         "true",                         "false"                     ],                     "default": "true",                     "options": {                                                 "infoText": "Set to true if you want the first row of data to be used as column names."                     }                 },                 "SheetName": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "eg. Sheet1"                         },                         "infoText": "Name of the Excel Worksheet that you wish to import"                     }                 }             },             "required": [                 "Type",                 "RelativePath",                 "DataFileName",                 "SchemaFileName",                 "FirstRowAsHeader",                 "SheetName"             ]         },         "Target": {             "type": "object",             "properties": {                 "Type": {                     "type": "string",                                         "enum": [                         "Table"                     ],                      "options":{                         "hidden": true                     }                 },                 "StagingTableSchema": {                     "type": "string",                     "options": {                                                 "inputAttributes": {                             "placeholder": "eg. dbo"                         },                         "infoText": "Schema for the transient table in which data will first be staged before being merged into final target table."                     }                 },                 "StagingTableName": {                     "type": "string",                     "options": {                                                 "inputAttributes": {                             "placeholder": "eg. StgCustomer"                         },                         "infoText": "Table name for the transient table in which data will first be staged before being merged into final target table."                     }                 },                 "AutoCreateTable": {                     "type": "string",                     "enum": [                         "true",                         "false"                     ],                     "default": "true",                     "options": {                         "infoText": "Set to true if you want the framework to automatically create the target table if it does not exist. If this is false and the target table does not exist then the task will fail with an error."                     }                 },                 "TableSchema": {                     "type": "string",                     "options": {                                                 "inputAttributes": {                             "placeholder": "eg. dbo"                         },                         "infoText": "Schema of the final target table."                     }                 },                 "TableName": {                     "type": "string",                     "options": {                                                 "inputAttributes": {                             "placeholder": "eg. Customer"                         },                         "infoText": "Name of the final target table."                     }                 },                 "PreCopySQL": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "eg. Delete from dbo.StgCustomer where Active = 0"                         },                         "infoText": "A SQL statement that you wish to be applied prior to merging the staging table and the final table"                     }                 },                 "PostCopySQL": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "eg. Delete from dbo.Customer where Active = 0"                         },                         "infoText": "A SQL statement that you wish to be applied after merging the staging table and the final table"                     }                 },                 "AutoGenerateMerge": {                     "type": "string",                     "enum": [                         "true",                         "false"                     ],                     "default": "true",                     "options": {                         "infoText": "Set to true if you want the framework to autogenerate the merge based on the primary key of the target table."                     }                 },                 "MergeSQL": {                     "type": "string",                     "format": "sql",                                                           "options": {                                                                         "infoText": "A custom merge statement to exectute. Note that this will be ignored if ''AutoGenerateMerge'' is true. Click in the box below to view or edit ",                         "ace": {                                                         "tabSize": 2,                             "useSoftTabs": true,                             "wrap": true                           }                     }                 }             },             "required": [                 "Type",                 "StagingTableSchema",                 "StagingTableName",                 "AutoCreateTable",                 "TableSchema",                 "TableName",                 "PreCopySQL",                 "PostCopySQL",                 "AutoGenerateMerge"             ]         }     },     "required": [         "Source",         "Target"     ] }', NULL)
GO
INSERT [dbo].[TaskTypeMapping] ([TaskTypeMappingId], [TaskTypeId], [MappingType], [MappingName], [SourceSystemType], [SourceType], [TargetSystemType], [TargetType], [TaskTypeJson], [ActiveYN], [TaskMasterJsonSchema], [TaskInstanceJsonSchema]) VALUES (2, 1, N'ADF', N'GPL_AzureBlobStorage_DelimitedText_AzureSqlTable_NA', N'Azure Blob', N'Csv', N'Azure SQL', N'Table', NULL, 1, N'{     "$schema": "http://json-schema.org/draft-04/schema#",     "type": "object",     "title": "TaskMasterJson",     "properties": {         "Source": {             "type": "object",             "properties": {                 "Type": {                     "type": "string",                                         "enum": [                         "Csv"                     ],                      "options" : {                         "hidden": true                     }                 },                 "RelativePath": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "eg. AwSample/dbo/Customer/{yyyy}/{MM}/{dd}/{hh}/"                         },                         "infoText": "Path of the file to be imported."                     }                 },                 "DataFileName": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "eg. Customer.xlsx"                         },                         "infoText": "Name of the file to be imported."                     }                 },                 "SkipLineCount": {                     "type": "integer",                                         "default": 0,                     "options": {                                                 "infoText": "Number of lines to skip."                     }                 },                 "FirstRowAsHeader": {                     "type": "string",                     "enum": [                         "true",                         "false"                     ],                     "default": "true",                     "options": {                                                 "infoText": "Set to true if you want the first row of data to be used as column names."                     }                 },                  "MaxConcorrentConnections": {                     "type": "integer",                     "default": 100,                     "options": {                                                 "infoText": "The upper limit of concurrent connections established to the data store during the activity run. Specify a value only when you want to limit concurrent connections"                     }                 }                             },             "required": [                 "Type",                 "RelativePath",                 "DataFileName",                 "SkipLineCount",                 "FirstRowAsHeader",                 "MaxConcorrentConnections"             ]         },         "Target": {             "type": "object",             "properties": {                 "Type": {                     "type": "string",                     "enum": [                         "Table"                     ],                      "options" : {                         "hidden": true                     }                 },                 "StagingTableSchema": {                     "type": "string",                     "options": {                                                 "inputAttributes": {                             "placeholder": "eg. dbo"                         },                         "infoText": "Schema for the transient table in which data will first be staged before being merged into final target table."                     }                 },                 "StagingTableName": {                     "type": "string",                     "options": {                                             "inputAttributes": {                             "placeholder": "eg. StgCustomer"                         },                         "infoText": "Table name for the transient table in which data will first be staged before being merged into final target table."                     }                 },                 "AutoCreateTable": {                     "type": "string",                     "enum": [                         "true",                         "false"                     ],                     "default": "true",                     "options": {                         "infoText": "Set to true if you want the framework to automatically create the target table if it does not exist. If this is false and the target table does not exist then the task will fail with an error."                     }                 },                 "TableSchema": {                     "type": "string",                     "options": {                                                 "inputAttributes": {                             "placeholder": "eg. dbo"                         },                         "infoText": "Schema of the final target table."                     }                 },                 "TableName": {                     "type": "string",                     "options": {                                                 "inputAttributes": {                             "placeholder": "eg. Customer"                         },                         "infoText": "Name of the final target table."                     }                 },                 "PreCopySQL": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "eg. Delete from dbo.StgCustomer where Active = 0"                         },                         "infoText": "A SQL statement that you wish to be applied prior to merging the staging table and the final table"                     }                 },                 "PostCopySQL": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "eg. Delete from dbo.Customer where Active = 0"                         },                         "infoText": "A SQL statement that you wish to be applied after merging the staging table and the final table"                     }                 },                 "AutoGenerateMerge": {                     "type": "string",                     "enum": [                         "true",                         "false"                     ],                     "default": "true",                     "options": {                         "infoText": "Set to true if you want the framework to autogenerate the merge based on the primary key of the target table."                     }                 },                 "MergeSQL": {                     "type": "string",                     "format": "sql",                                                           "options": {                                                                         "infoText": "A custom merge statement to exectute. Note that this will be ignored if ''AutoGenerateMerge'' is true. Click in the box below to view or edit ",                         "ace": {                                                         "tabSize": 2,                             "useSoftTabs": true,                             "wrap": true                           }                     }                 },                  "DynamicMapping": {                     "type": "object",                                                                               "options": {                                                                         "infoText": "",                         "hidden": true                     }                 }             },             "required": [                 "Type",                 "StagingTableSchema",                 "StagingTableName",                 "AutoCreateTable",                 "TableSchema",                 "TableName",                 "PreCopySQL",                 "PostCopySQL",                 "AutoGenerateMerge",                  "DynamicMapping"             ]         }     },     "required": [         "Source",         "Target"     ] }', NULL)
GO
INSERT [dbo].[TaskTypeMapping] ([TaskTypeMappingId], [TaskTypeId], [MappingType], [MappingName], [SourceSystemType], [SourceType], [TargetSystemType], [TargetType], [TaskTypeJson], [ActiveYN], [TaskMasterJsonSchema], [TaskInstanceJsonSchema]) VALUES (3, 1, N'ADF', N'GPL_AzureBlobStorage_Json_AzureSqlTable_NA', N'Azure Blob', N'Json', N'Azure SQL', N'Table', NULL, 1, N'{     "$schema": "http://json-schema.org/draft-04/schema#",     "type": "object",     "properties": {         "Source": {             "type": "object",             "properties": {                 "Type": {                     "type": "string",                                         "enum": [                         "Json"                     ],                      "options":{                         "hidden": true                     }                 },                 "RelativePath": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "eg. AwSample/dbo/Customer/{yyyy}/{MM}/{dd}/{hh}/"                         },                         "infoText": "Path of the file to be imported."                     }                 },                 "DataFileName": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "eg. Customer.xlsx"                         },                         "infoText": "Name of the file to be imported."                     }                 },                 "SchemaFileName": {                     "type": "string"                 },                 "MaxConcorrentConnections": {                     "type": "integer",                     "default": 10,                                                            "options": {                                                 "infoText": ""                     }                 }             },             "required": [                 "Type",                 "RelativePath",                 "DataFileName",                 "SchemaFileName",                 "MaxConcorrentConnections"             ]         },         "Target": {             "type": "object",             "properties": {                 "Type": {                     "type": "string",                                         "enum": [                         "Table"                     ],                      "options":{                         "hidden": true                     }                 },                 "StagingTableSchema": {                     "type": "string",                     "options": {                                                 "inputAttributes": {                             "placeholder": "eg. dbo"                         },                         "infoText": "Schema for the transient table in which data will first be staged before being merged into final target table."                     }                 },                 "StagingTableName": {                     "type": "string",                     "options": {                                                 "inputAttributes": {                             "placeholder": "eg. StgCustomer"                         },                         "infoText": "Table name for the transient table in which data will first be staged before being merged into final target table."                     }                 },                 "AutoCreateTable": {                     "type": "string",                     "enum": [                         "true",                         "false"                     ],                     "default": "true",                     "options": {                         "infoText": "Set to true if you want the framework to automatically create the target table if it does not exist. If this is false and the target table does not exist then the task will fail with an error."                     }                 },                 "TableSchema": {                     "type": "string",                     "options": {                                                 "inputAttributes": {                             "placeholder": "eg. dbo"                         },                         "infoText": "Schema of the final target table."                     }                 },                 "TableName": {                     "type": "string",                     "options": {                                                 "inputAttributes": {                             "placeholder": "eg. Customer"                         },                         "infoText": "Name of the final target table."                     }                 },                 "PreCopySQL": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "eg. Delete from dbo.StgCustomer where Active = 0"                         },                         "infoText": "A SQL statement that you wish to be applied prior to merging the staging table and the final table"                     }                 },                 "PostCopySQL": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "eg. Delete from dbo.Customer where Active = 0"                         },                         "infoText": "A SQL statement that you wish to be applied after merging the staging table and the final table"                     }                 },                 "AutoGenerateMerge": {                     "type": "string",                     "enum": [                         "true",                         "false"                     ],                     "default": "true",                     "options": {                         "infoText": "Set to true if you want the framework to autogenerate the merge based on the primary key of the target table."                     }                 },                 "MergeSQL": {                     "type": "string",                     "format": "sql",                                                           "options": {                                                                         "infoText": "A custom merge statement to exectute. Note that this will be ignored if ''AutoGenerateMerge'' is true. Click in the box below to view or edit ",                         "ace": {                                                         "tabSize": 2,                             "useSoftTabs": true,                             "wrap": true                           }                     }                 }             },             "required": [                 "Type",                 "StagingTableSchema",                 "StagingTableName",                 "AutoCreateTable",                 "TableSchema",                 "TableName",                 "PreCopySQL",                 "PostCopySQL",                 "AutoGenerateMerge"             ]         }     },     "required": [         "Source",         "Target"     ] }', NULL)
GO
INSERT [dbo].[TaskTypeMapping] ([TaskTypeMappingId], [TaskTypeId], [MappingType], [MappingName], [SourceSystemType], [SourceType], [TargetSystemType], [TargetType], [TaskTypeJson], [ActiveYN], [TaskMasterJsonSchema], [TaskInstanceJsonSchema]) VALUES (4, 2, N'ADF', N'GPL_AzureBlobStorage_Excel_AzureBlobStorage_DelimitedText', N'Azure Blob', N'Excel', N'Azure Blob', N'Csv', NULL, 1, N'{   "$schema": "http://json-schema.org/draft-04/schema#",   "type": "object",   "title": "TaskMasterJson",   "properties": {     "Source": {       "type": "object",       "properties": {         "Type": {           "type": "string",           "enum": [             "Excel"           ],           "options": {             "hidden": true           }         },         "RelativePath": {           "type": "string",           "options": {             "inputAttributes": {               "placeholder": "eg. AwSample/dbo/Customer/{yyyy}/{MM}/{dd}/{hh}/"             },             "infoText": "Path of the file to be imported."           }         },         "DataFileName": {           "type": "string",           "options": {             "inputAttributes": {               "placeholder": "eg. Customer.xlsx"             },             "infoText": "Name of the file to be imported."           }         },         "SchemaFileName": {           "type": "string"         },         "FirstRowAsHeader": {           "type": "string",           "enum": [             "true",             "false"           ],           "default": "true",           "options": {             "infoText": "Set to true if you want the first row of data to be used as column names."           }         },         "SheetName": {           "type": "string",           "options": {             "inputAttributes": {               "placeholder": "eg. Sheet1"             },             "infoText": "Name of the Excel Worksheet that you wish to import"           }         }       },       "required": [         "Type",         "RelativePath",         "DataFileName",         "SchemaFileName",         "FirstRowAsHeader",         "SheetName"       ]     },     "Target": {       "type": "object",       "properties": {         "Type": {           "type": "string"         },         "options": {           "hidden": true         },         "RelativePath": {           "type": "string"         },         "DataFileName": {           "type": "string"         },         "SchemaFileName": {           "type": "string"         },         "FirstRowAsHeader": {           "type": "string"         }       },       "required": [         "Type",         "RelativePath",         "DataFileName",         "SchemaFileName",         "FirstRowAsHeader"       ]     }   },   "required": [     "Source",     "Target"   ] }', NULL)
GO
INSERT [dbo].[TaskTypeMapping] ([TaskTypeMappingId], [TaskTypeId], [MappingType], [MappingName], [SourceSystemType], [SourceType], [TargetSystemType], [TargetType], [TaskTypeJson], [ActiveYN], [TaskMasterJsonSchema], [TaskInstanceJsonSchema]) VALUES (5, 2, N'ADF', N'GPL_AzureBlobFS_Excel_AzureBlobFS_DelimitedText', N'ADLS', N'Excel', N'ADLS', N'Csv', NULL, 1, N'{   "$schema": "http://json-schema.org/draft-04/schema#",   "type": "object",   "title": "TaskMasterJson",   "properties": {     "Source": {       "type": "object",       "properties": {         "Type": {           "type": "string",           "enum": [             "Excel"           ],           "options": {             "hidden": true           }         },         "RelativePath": {           "type": "string",           "options": {             "inputAttributes": {               "placeholder": "eg. AwSample/dbo/Customer/{yyyy}/{MM}/{dd}/{hh}/"             },             "infoText": "Path of the file to be imported."           }         },         "DataFileName": {           "type": "string",           "options": {             "inputAttributes": {               "placeholder": "eg. Customer.xlsx"             },             "infoText": "Name of the file to be imported."           }         },         "SchemaFileName": {           "type": "string"         },         "FirstRowAsHeader": {           "type": "string",           "enum": [             "true",             "false"           ],           "default": "true",           "options": {             "infoText": "Set to true if you want the first row of data to be used as column names."           }         },         "SheetName": {           "type": "string",           "options": {             "inputAttributes": {               "placeholder": "eg. Sheet1"             },             "infoText": "Name of the Excel Worksheet that you wish to import"           }         }       },       "required": [         "Type",         "RelativePath",         "DataFileName",         "SchemaFileName",         "FirstRowAsHeader",         "SheetName"       ]     },     "Target": {       "type": "object",       "properties": {         "Type": {           "type": "string"         },         "options": {           "hidden": true         },         "RelativePath": {           "type": "string"         },         "DataFileName": {           "type": "string"         },         "SchemaFileName": {           "type": "string"         },         "FirstRowAsHeader": {           "type": "string"         }       },       "required": [         "Type",         "RelativePath",         "DataFileName",         "SchemaFileName",         "FirstRowAsHeader"       ]     }   },   "required": [     "Source",     "Target"   ] }', NULL)
GO
INSERT [dbo].[TaskTypeMapping] ([TaskTypeMappingId], [TaskTypeId], [MappingType], [MappingName], [SourceSystemType], [SourceType], [TargetSystemType], [TargetType], [TaskTypeJson], [ActiveYN], [TaskMasterJsonSchema], [TaskInstanceJsonSchema]) VALUES (6, 3, N'ADF', N'GPL_AzureSqlTable_NA_AzureBlobStorage_Parquet', N'Azure SQL', N'Table', N'Azure Blob', N'Parquet', NULL, 1, N'{     "$schema": "http://json-schema.org/draft-04/schema#",     "type": "object",     "title": "TaskMasterJson",     "properties": {         "Source": {             "type": "object",             "properties": {                 "Type": {                     "type": "string",                                         "enum": [                         "Table",                         "SQL"                     ],                     "options": {                         "hidden":true,                         "infoText": "Select TABLE if you want to select all columns in a table. Select SQL if you want to define a custom SQL statement to be used to extract data."                     }                 },                 "IncrementalType": {                     "type": "string",                     "description": "Full Extraction or Incremental based on a Watermark Column",                     "enum": [                         "Full",                         "Watermark"                     ],                     "options": {                         "infoText": "Select Full for Full Table Extraction & Watermark for Incremental based on a Watermark column"                     },                     "default":"Table"                 },                 "ExtractionSQL": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "eg. Select top 100 * from Customer"                         },                         "infoText": "A custom SQL statement that you wish to be used to extract the data. **Note that this is ignored if the Source Type is ''Table''"                     },                     "default":""                 },                 "TableSchema": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "eg. dbo"                         },                          "infoText": "The schema of the table to extract. **Note that this is ignored if the Source Type is ''SQL''"                     },                     "default":""                  },                 "TableName": {                     "type": "string",                     "options": {                                                 "inputAttributes": {                             "placeholder": "eg. Customer"                         },                          "infoText": "The name of the table to extract. **Note that this is ignored if the Source Type is ''SQL''"                     },                     "default":""                 },                 "ChunkField": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "eg. Customer Id"                         },                         "infoText": "If you want to break an extraction down into multiple files fill out the chunk fields. Otherwise leave blank."                     },                     "default":""                 },                 "ChunkSize": {                     "type": "integer",                     "options": {                         "inputAttributes": {                             "placeholder": 0                                                 },                                                 "infoText": "Number of rows to use for each ''chunk'' of data."                     },                     "default": 0                 }             },             "required": [                 "Type",                 "IncrementalType"             ]         },         "Target": {             "type": "object",             "properties": {                 "Type": {                     "type": "string",                                        "enum": [                         "Parquet"                     ],                     "options": {                         "hidden":true,                         "infoText": "Presently only Parquet is supported"                     }                 },                 "RelativePath": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "AwSample/dbo/Customer/{yyyy}/{MM}/{dd}/{hh}/"                         },                         "infoText": "The path of the directory into which you want your extracted data to be written. You can use placeholders such (eg. {yyyy}/{MM}/{dd}/{hh}/). "                     }                 },                 "DataFileName": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "dbo.Customer.parquet"                         },                         "infoText": "Name of the file that will hold the extracted data"                     }                 },                 "SchemaFileName": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "dbo.Customer.json"                         },                         "infoText": "Name of the file that will hold the schema associated with the extracted data."                     }                 }             },             "required": [                 "Type",                 "RelativePath",                 "DataFileName",                 "SchemaFileName"             ]         }     },     "required": [         "Source",         "Target"     ] }', N'
{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "type": "object",
  "properties": {
    "TargetRelativePath": {
      "type": "string"
    },
    "IncrementalField": {
      "type": "string"
    },
    "IncrementalColumnType": {
      "type": "string"
    },
    "IncrementalValue": {
      "type": "string"
    }
  },
  "required": [
    "TargetRelativePath"
  ]
}')
GO
INSERT [dbo].[TaskTypeMapping] ([TaskTypeMappingId], [TaskTypeId], [MappingType], [MappingName], [SourceSystemType], [SourceType], [TargetSystemType], [TargetType], [TaskTypeJson], [ActiveYN], [TaskMasterJsonSchema], [TaskInstanceJsonSchema]) VALUES (7, 3, N'ADF', N'GPL_AzureSqlTable_NA_AzureBlobFS_Parquet', N'Azure SQL', N'Table', N'ADLS', N'Parquet', NULL, 1, N'{     "$schema": "http://json-schema.org/draft-04/schema#",     "type": "object",     "title": "TaskMasterJson",     "properties": {         "Source": {             "type": "object",             "properties": {                 "Type": {                     "type": "string",                                         "enum": [                         "Table",                         "SQL"                     ],                     "options": {                         "hidden":true,                         "infoText": "Select TABLE if you want to select all columns in a table. Select SQL if you want to define a custom SQL statement to be used to extract data."                     }                 },                 "IncrementalType": {                     "type": "string",                     "description": "Full Extraction or Incremental based on a Watermark Column",                     "enum": [                         "Full",                         "Watermark"                     ],                     "options": {                         "infoText": "Select Full for Full Table Extraction & Watermark for Incremental based on a Watermark column"                     },                     "default":"Table"                 },                 "ExtractionSQL": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "eg. Select top 100 * from Customer"                         },                         "infoText": "A custom SQL statement that you wish to be used to extract the data. **Note that this is ignored if the Source Type is ''Table''"                     },                     "default":""                 },                 "TableSchema": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "eg. dbo"                         },                          "infoText": "The schema of the table to extract. **Note that this is ignored if the Source Type is ''SQL''"                     },                     "default":""                  },                 "TableName": {                     "type": "string",                     "options": {                                                 "inputAttributes": {                             "placeholder": "eg. Customer"                         },                          "infoText": "The name of the table to extract. **Note that this is ignored if the Source Type is ''SQL''"                     },                     "default":""                 },                 "ChunkField": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "eg. Customer Id"                         },                         "infoText": "If you want to break an extraction down into multiple files fill out the chunk fields. Otherwise leave blank."                     },                     "default":""                 },                 "ChunkSize": {                     "type": "integer",                     "options": {                         "inputAttributes": {                             "placeholder": 0                                                 },                                                 "infoText": "Number of rows to use for each ''chunk'' of data."                     },                     "default": 0                 }             },             "required": [                 "Type",                 "IncrementalType"             ]         },         "Target": {             "type": "object",             "properties": {                 "Type": {                     "type": "string",                                        "enum": [                         "Parquet"                     ],                     "options": {                         "hidden":true,                         "infoText": "Presently only Parquet is supported"                     }                 },                 "RelativePath": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "AwSample/dbo/Customer/{yyyy}/{MM}/{dd}/{hh}/"                         },                         "infoText": "The path of the directory into which you want your extracted data to be written. You can use placeholders such (eg. {yyyy}/{MM}/{dd}/{hh}/). "                     }                 },                 "DataFileName": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "dbo.Customer.parquet"                         },                         "infoText": "Name of the file that will hold the extracted data"                     }                 },                 "SchemaFileName": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "dbo.Customer.json"                         },                         "infoText": "Name of the file that will hold the schema associated with the extracted data."                     }                 }             },             "required": [                 "Type",                 "RelativePath",                 "DataFileName",                 "SchemaFileName"             ]         }     },     "required": [         "Source",         "Target"     ] }', N'
{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "type": "object",
  "properties": {
    "TargetRelativePath": {
      "type": "string"
    },
    "IncrementalField": {
      "type": "string"
    },
    "IncrementalColumnType": {
      "type": "string"
    },
    "IncrementalValue": {
      "type": "string"
    }
  },
  "required": [
    "TargetRelativePath"
  ]
}')
GO
INSERT [dbo].[TaskTypeMapping] ([TaskTypeMappingId], [TaskTypeId], [MappingType], [MappingName], [SourceSystemType], [SourceType], [TargetSystemType], [TargetType], [TaskTypeJson], [ActiveYN], [TaskMasterJsonSchema], [TaskInstanceJsonSchema]) VALUES (8, 1, N'ADF', N'GPL_AzureBlobFS_Json_AzureSqlTable_NA', N'ADLS', N'Json', N'Azure SQL', N'Table', NULL, 1, N'{     "$schema": "http://json-schema.org/draft-04/schema#",     "type": "object",     "properties": {         "Source": {             "type": "object",             "properties": {                 "Type": {                     "type": "string",                                         "enum": [                         "Json"                     ],                      "options":{                         "hidden": true                     }                 },                 "RelativePath": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "eg. AwSample/dbo/Customer/{yyyy}/{MM}/{dd}/{hh}/"                         },                         "infoText": "Path of the file to be imported."                     }                 },                 "DataFileName": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "eg. Customer.xlsx"                         },                         "infoText": "Name of the file to be imported."                     }                 },                 "SchemaFileName": {                     "type": "string"                 },                 "MaxConcorrentConnections": {                     "type": "integer",                     "default": 10,                                                            "options": {                                                 "infoText": ""                     }                 }             },             "required": [                 "Type",                 "RelativePath",                 "DataFileName",                 "SchemaFileName",                 "MaxConcorrentConnections"             ]         },         "Target": {             "type": "object",             "properties": {                 "Type": {                     "type": "string",                                         "enum": [                         "Table"                     ],                      "options":{                         "hidden": true                     }                 },                 "StagingTableSchema": {                     "type": "string",                     "options": {                                                 "inputAttributes": {                             "placeholder": "eg. dbo"                         },                         "infoText": "Schema for the transient table in which data will first be staged before being merged into final target table."                     }                 },                 "StagingTableName": {                     "type": "string",                     "options": {                                                 "inputAttributes": {                             "placeholder": "eg. StgCustomer"                         },                         "infoText": "Table name for the transient table in which data will first be staged before being merged into final target table."                     }                 },                 "AutoCreateTable": {                     "type": "string",                     "enum": [                         "true",                         "false"                     ],                     "default": "true",                     "options": {                         "infoText": "Set to true if you want the framework to automatically create the target table if it does not exist. If this is false and the target table does not exist then the task will fail with an error."                     }                 },                 "TableSchema": {                     "type": "string",                     "options": {                                                 "inputAttributes": {                             "placeholder": "eg. dbo"                         },                         "infoText": "Schema of the final target table."                     }                 },                 "TableName": {                     "type": "string",                     "options": {                                                 "inputAttributes": {                             "placeholder": "eg. Customer"                         },                         "infoText": "Name of the final target table."                     }                 },                 "PreCopySQL": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "eg. Delete from dbo.StgCustomer where Active = 0"                         },                         "infoText": "A SQL statement that you wish to be applied prior to merging the staging table and the final table"                     }                 },                 "PostCopySQL": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "eg. Delete from dbo.Customer where Active = 0"                         },                         "infoText": "A SQL statement that you wish to be applied after merging the staging table and the final table"                     }                 },                 "AutoGenerateMerge": {                     "type": "string",                     "enum": [                         "true",                         "false"                     ],                     "default": "true",                     "options": {                         "infoText": "Set to true if you want the framework to autogenerate the merge based on the primary key of the target table."                     }                 },                 "MergeSQL": {                     "type": "string",                     "format": "sql",                                                           "options": {                                                                         "infoText": "A custom merge statement to exectute. Note that this will be ignored if ''AutoGenerateMerge'' is true. Click in the box below to view or edit ",                         "ace": {                                                         "tabSize": 2,                             "useSoftTabs": true,                             "wrap": true                           }                     }                 }             },             "required": [                 "Type",                 "StagingTableSchema",                 "StagingTableName",                 "AutoCreateTable",                 "TableSchema",                 "TableName",                 "PreCopySQL",                 "PostCopySQL",                 "AutoGenerateMerge"             ]         }     },     "required": [         "Source",         "Target"     ] }', NULL)
GO
INSERT [dbo].[TaskTypeMapping] ([TaskTypeMappingId], [TaskTypeId], [MappingType], [MappingName], [SourceSystemType], [SourceType], [TargetSystemType], [TargetType], [TaskTypeJson], [ActiveYN], [TaskMasterJsonSchema], [TaskInstanceJsonSchema]) VALUES (9, 1, N'ADF', N'GPL_AzureBlobFS_Parquet_AzureSqlTable_NA', N'ADLS', N'Parquet', N'Azure SQL', N'Table', NULL, 1, N'{     "$schema": "http://json-schema.org/draft-04/schema#",     "type": "object",     "title": "TaskMasterJson",     "properties": {         "Source": {             "type": "object",             "properties": {                 "Type": {                     "type": "string",                     "enum": [                         "Parquet"                     ],                     "options": {                         "hidden": true                     }                 },                 "RelativePath": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "eg. AwSample/dbo/Customer/{yyyy}/{MM}/{dd}/{hh}/"                         },                         "infoText": "Path of the file to be imported."                     }                 },                 "DataFileName": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "eg. Customer.xlsx"                         },                         "infoText": "Name of the file to be imported."                     }                 },                 "SchemaFileName": {                     "type": "string"                 }             },             "required": [                 "Type",                 "RelativePath",                 "DataFileName",                 "SchemaFileName"             ]         },         "Target": {             "type": "object",             "properties": {                 "Type": {                     "type": "string",                                         "enum": [                         "Table"                     ],                      "options": {                         "hidden": true                     }                 },                 "StagingTableSchema": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "eg. dbo"                         },                         "infoText": "Schema for the transient table in which data will first be staged before being merged into final target table."                     }                 },                 "StagingTableName": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "eg. StgCustomer"                         },                         "infoText": "Table name for the transient table in which data will first be staged before being merged into final target table."                     }                 },                 "AutoCreateTable": {                     "type": "string",                     "enum": [                         "true",                         "false"                     ],                     "default": "true",                     "options": {                         "infoText": "Set to true if you want the framework to automatically create the target table if it does not exist. If this is false and the target table does not exist then the task will fail with an error."                     }                 },                 "TableSchema": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "eg. dbo"                         },                         "infoText": "Schema of the final target table. Note that this must exist in the target database as it will not be autogenerated."                     }                 },                 "TableName": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "eg. Customer"                         },                         "infoText": "Name of the final target table."                     }                 },                 "PreCopySQL": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "eg. Delete from dbo.StgCustomer where Active = 0"                         },                         "infoText": "A SQL statement that you wish to be applied prior to merging the staging table and the final table"                     }                 },                 "PostCopySQL": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "eg. Delete from dbo.Customer where Active = 0"                         },                         "infoText": "A SQL statement that you wish to be applied after merging the staging table and the final table"                     }                 },                 "AutoGenerateMerge": {                     "type": "string",                     "enum": [                         "true",                         "false"                     ],                     "default": "true",                     "options": {                         "infoText": "Set to true if you want the framework to autogenerate the merge based on the primary key of the target table."                     }                 },                 "MergeSQL": {                     "type": "string",                     "format": "sql",                     "options": {                         "infoText": "A custom merge statement to exectute. Note that this will be ignored if ''AutoGenerateMerge'' is true. Click in the box below to view or edit ",                         "ace": {                             "tabSize": 2,                             "useSoftTabs": true,                             "wrap": true                         }                     }                 }             },             "required": [                 "Type",                 "StagingTableSchema",                 "StagingTableName",                 "AutoCreateTable",                 "TableSchema",                 "TableName",                 "PreCopySQL",                 "PostCopySQL",                 "AutoGenerateMerge"             ]         }     },     "required": [         "Source",         "Target"     ] }', NULL)
GO
INSERT [dbo].[TaskTypeMapping] ([TaskTypeMappingId], [TaskTypeId], [MappingType], [MappingName], [SourceSystemType], [SourceType], [TargetSystemType], [TargetType], [TaskTypeJson], [ActiveYN], [TaskMasterJsonSchema], [TaskInstanceJsonSchema]) VALUES (10, 1, N'ADF', N'GPL_AzureBlobStorage_Parquet_AzureSqlTable_NA', N'Azure Blob', N'Parquet', N'Azure SQL', N'Table', NULL, 1, N'{     "$schema": "http://json-schema.org/draft-04/schema#",     "type": "object",     "title": "TaskMasterJson",     "properties": {         "Source": {             "type": "object",             "properties": {                 "Type": {                     "type": "string",                     "enum": [                         "Parquet"                     ],                     "options": {                         "hidden": true                     }                 },                 "RelativePath": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "eg. AwSample/dbo/Customer/{yyyy}/{MM}/{dd}/{hh}/"                         },                         "infoText": "Path of the file to be imported."                     }                 },                 "DataFileName": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "eg. Customer.xlsx"                         },                         "infoText": "Name of the file to be imported."                     }                 },                 "SchemaFileName": {                     "type": "string"                 }             },             "required": [                 "Type",                 "RelativePath",                 "DataFileName",                 "SchemaFileName"             ]         },         "Target": {             "type": "object",             "properties": {                 "Type": {                     "type": "string",                                         "enum": [                         "Table"                     ],                      "options": {                         "hidden": true                     }                 },                 "StagingTableSchema": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "eg. dbo"                         },                         "infoText": "Schema for the transient table in which data will first be staged before being merged into final target table."                     }                 },                 "StagingTableName": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "eg. StgCustomer"                         },                         "infoText": "Table name for the transient table in which data will first be staged before being merged into final target table."                     }                 },                 "AutoCreateTable": {                     "type": "string",                     "enum": [                         "true",                         "false"                     ],                     "default": "true",                     "options": {                         "infoText": "Set to true if you want the framework to automatically create the target table if it does not exist. If this is false and the target table does not exist then the task will fail with an error."                     }                 },                 "TableSchema": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "eg. dbo"                         },                         "infoText": "Schema of the final target table. Note that this must exist in the target database as it will not be autogenerated."                     }                 },                 "TableName": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "eg. Customer"                         },                         "infoText": "Name of the final target table."                     }                 },                 "PreCopySQL": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "eg. Delete from dbo.StgCustomer where Active = 0"                         },                         "infoText": "A SQL statement that you wish to be applied prior to merging the staging table and the final table"                     }                 },                 "PostCopySQL": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "eg. Delete from dbo.Customer where Active = 0"                         },                         "infoText": "A SQL statement that you wish to be applied after merging the staging table and the final table"                     }                 },                 "AutoGenerateMerge": {                     "type": "string",                     "enum": [                         "true",                         "false"                     ],                     "default": "true",                     "options": {                         "infoText": "Set to true if you want the framework to autogenerate the merge based on the primary key of the target table."                     }                 },                 "MergeSQL": {                     "type": "string",                     "format": "sql",                     "options": {                         "infoText": "A custom merge statement to exectute. Note that this will be ignored if ''AutoGenerateMerge'' is true. Click in the box below to view or edit ",                         "ace": {                             "tabSize": 2,                             "useSoftTabs": true,                             "wrap": true                         }                     }                 }             },             "required": [                 "Type",                 "StagingTableSchema",                 "StagingTableName",                 "AutoCreateTable",                 "TableSchema",                 "TableName",                 "PreCopySQL",                 "PostCopySQL",                 "AutoGenerateMerge"             ]         }     },     "required": [         "Source",         "Target"     ] }', NULL)
GO
INSERT [dbo].[TaskTypeMapping] ([TaskTypeMappingId], [TaskTypeId], [MappingType], [MappingName], [SourceSystemType], [SourceType], [TargetSystemType], [TargetType], [TaskTypeJson], [ActiveYN], [TaskMasterJsonSchema], [TaskInstanceJsonSchema]) VALUES (11, 2, N'ADF', N'TBD', N'File', N'Binary', N'Azure Blob', N'Binary', NULL, 1, N'{     "$schema": "http://json-schema.org/draft-04/schema#",     "type": "object",     "properties": {         "Source": {             "type": "object",             "properties": {                 "Type": {                     "type": "string",                     "enum": [                         "Binary"                     ],                     "default": "Binary",                     "options": {                         "infoText": "Only Binary is supported this time. ",                         "hidden":true                     }                 },                 "RelativePath": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "eg. AwSample/dbo/Customer/{yyyy}/{MM}/{dd}/{hh}/"                         },                         "infoText": "Path of the file to be copied. You can use pattern match characters eg. *. See https://docs.microsoft.com/en-us/azure/data-factory/connector-azure-blob-storage?tabs=data-factory#blob-storage-as-a-source-type"                     }                 },                 "DataFileName": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "eg. *.parquet"                         },                         "infoText": "Name of the file to be copied. You can use pattern match characters eg. *. See https://docs.microsoft.com/en-us/azure/data-factory/connector-azure-blob-storage?tabs=data-factory#blob-storage-as-a-source-type"                     }                 },                 "Recursively": {                     "type": "string",                     "enum": [                         "true",                         "false"                     ],                     "default": "true",                     "options": {                         "infoText": "Set to true if you want the framework to copy files from subfolders."                     }                 },                 "DeleteAfterCompletion": {                     "type": "string",                     "enum": [                         "true",                         "false"                     ],                     "default": "true",                     "options": {                         "infoText": "Set to true if you want the framework to remove the source file after a successsful copy."                     }                 }             },             "required": [                 "Type",                 "RelativePath",                 "DataFileName",                 "Recursively",                 "DeleteAfterCompletion"             ]         },         "Target": {             "type": "object",             "properties": {                 "Type": {                     "type": "string",                     "enum": [                         "Binary"                     ],                     "default": "Binary",                     "options": {                         "infoText": "Only Binary is supported this time. ",                          "hidden": true                     }                 },                 "RelativePath": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "eg. AwSample/dbo/Customer/{yyyy}/{MM}/{dd}/{hh}/"                         },                         "infoText": "Path of the target directory. You can use pattern match characters eg. *. See https://docs.microsoft.com/en-us/azure/data-factory/connector-azure-blob-storage?tabs=data-factory#blob-storage-as-a-source-type"                     }                 },                 "DataFileName": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "eg. Customer.parquet"                         },                         "infoText": "Name of the target file. Leave this blank if your are using pattern matching to copy multiple files from source."                     }                 }             },             "required": [                 "Type",                 "RelativePath",                 "DataFileName"             ]         }     },     "required": [         "Source",         "Target"     ] }', NULL)
GO
INSERT [dbo].[TaskTypeMapping] ([TaskTypeMappingId], [TaskTypeId], [MappingType], [MappingName], [SourceSystemType], [SourceType], [TargetSystemType], [TargetType], [TaskTypeJson], [ActiveYN], [TaskMasterJsonSchema], [TaskInstanceJsonSchema]) VALUES (12, 2, N'ADF', N'TBD', N'File', N'Binary', N'Azure Blob', N'Binary', NULL, 1, N'{     "$schema": "http://json-schema.org/draft-04/schema#",     "type": "object",     "properties": {         "Source": {             "type": "object",             "properties": {                 "Type": {                     "type": "string",                     "enum": [                         "Binary"                     ],                     "default": "Binary",                     "options": {                         "infoText": "Only Binary is supported this time. ",                         "hidden": true                     }                 },                 "RelativePath": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "eg. AwSample/dbo/Customer/{yyyy}/{MM}/{dd}/{hh}/"                         },                         "infoText": "Path of the file to be copied. You can use pattern match characters eg. *. See https://docs.microsoft.com/en-us/azure/data-factory/connector-azure-blob-storage?tabs=data-factory#blob-storage-as-a-source-type"                     }                 },                 "DataFileName": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "eg. *.parquet"                         },                         "infoText": "Name of the file to be copied. You can use pattern match characters eg. *. See https://docs.microsoft.com/en-us/azure/data-factory/connector-azure-blob-storage?tabs=data-factory#blob-storage-as-a-source-type"                     }                 },                 "Recursively": {                     "type": "string",                     "enum": [                         "true",                         "false"                     ],                     "default": "true",                     "options": {                         "infoText": "Set to true if you want the framework to copy files from subfolders."                     }                 },                 "DeleteAfterCompletion": {                     "type": "string",                     "enum": [                         "true",                         "false"                     ],                     "default": "true",                     "options": {                         "infoText": "Set to true if you want the framework to remove the source file after a successsful copy."                     }                 }             },             "required": [                 "Type",                 "RelativePath",                 "DataFileName",                 "Recursively",                 "DeleteAfterCompletion"             ]         },         "Target": {             "type": "object",             "properties": {                 "Type": {                     "type": "string",                     "enum": [                         "Binary"                     ],                     "default": "Binary",                     "options": {                         "infoText": "Only Binary is supported this time. ",                          "hidden": true                     }                 },                 "RelativePath": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "eg. AwSample/dbo/Customer/{yyyy}/{MM}/{dd}/{hh}/"                         },                         "infoText": "Path of the target directory. You can use pattern match characters eg. *. See https://docs.microsoft.com/en-us/azure/data-factory/connector-azure-blob-storage?tabs=data-factory#blob-storage-as-a-source-type"                     }                 },                 "DataFileName": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "eg. Customer.parquet"                         },                         "infoText": "Name of the target file. Leave this blank if your are using pattern matching to copy multiple files from source."                     }                 }             },             "required": [                 "Type",                 "RelativePath",                 "DataFileName"             ]         }     },     "required": [         "Source",         "Target"     ] }', NULL)
GO
INSERT [dbo].[TaskTypeMapping] ([TaskTypeMappingId], [TaskTypeId], [MappingType], [MappingName], [SourceSystemType], [SourceType], [TargetSystemType], [TargetType], [TaskTypeJson], [ActiveYN], [TaskMasterJsonSchema], [TaskInstanceJsonSchema]) VALUES (13, 3, N'ADF', N'TBD', N'SQL Server', N'Table', N'Azure Blob', N'Parquet', NULL, 1, N'{     "$schema": "http://json-schema.org/draft-04/schema#",     "type": "object",     "properties": {         "Source": {             "type": "object",             "properties": {                 "Type": {                     "type": "string",                                         "enum": [                         "Table",                         "SQL"                     ],                     "options": {                         "infoText": "Select TABLE if you want to select all columns in a table. Select SQL if you want to define a custom SQL statement to be used to extract data.",                          "hidden": true                     }                 },                 "IncrementalType": {                     "type": "string",                     "description": "Full Extraction or Incremental based on a Watermark Column",                     "enum": [                         "Full",                         "Watermark"                     ],                     "options": {                         "infoText": "Select Full for Full Table Extraction & Watermark for Incremental based on a Watermark column"                     }                 },                 "ExtractionSQL": {                     "type": "string",                     "options": {                                             }                 },                 "TableSchema": {                     "type": "string",                     "options": {                                                 "inputAttributes": {                             "placeholder": "eg. dbo"                         }                     }                 },                 "TableName": {                     "type": "string",                     "options": {                                                 "inputAttributes": {                             "placeholder": "eg. Customer"                         }                     }                 },                 "ChunkField": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "Column to use for chunking. Only use for very large tables. Otherwise leave blank."                         },                         "infoText": "If you want to break an extraction down into multiple files fill out the chunk fields. Otherwise leave blank."                     }                 },                 "ChunkSize": {                     "type": "integer",                     "options": {                         "inputAttributes": {                             "placeholder": "Hello"                         },                         "infoText": "Number of rows to use for each ''chunk'' of data"                     }                 }             },             "required": [                 "Type",                 "IncrementalType"             ]         },         "Target": {             "type": "object",             "properties": {                 "Type": {                     "type": "string",                                         "enum": [                         "Parquet"                     ],                     "options": {                         "infoText": "Presently only Parquet is supported",                          "hidden": true                     }                 },                 "RelativePath": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "AwSample/dbo/Customer/{yyyy}/{MM}/{dd}/{hh}/"                         },                         "infoText": "The path of the directory into which you want your extracted data to be written."                     }                 },                 "DataFileName": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "dbo.Customer.parquet"                         },                         "infoText": "Name of the file that will hold the extracted data"                     }                 },                 "SchemaFileName": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "dbo.Customer.json"                         },                         "infoText": "Name of the file that will hold the schema associated with the extracted data."                     }                 }             },             "required": [                 "Type",                 "RelativePath",                 "DataFileName",                 "SchemaFileName"             ]         }     },     "required": [         "Source",         "Target"     ] }', NULL)
GO
INSERT [dbo].[TaskTypeMapping] ([TaskTypeMappingId], [TaskTypeId], [MappingType], [MappingName], [SourceSystemType], [SourceType], [TargetSystemType], [TargetType], [TaskTypeJson], [ActiveYN], [TaskMasterJsonSchema], [TaskInstanceJsonSchema]) VALUES (14, 3, N'ADF', N'TBD', N'SQL Server', N'Table', N'File', N'Parquet', NULL, 1, N'{     "$schema": "http://json-schema.org/draft-04/schema#",     "type": "object",     "properties": {         "Source": {             "type": "object",             "properties": {                 "Type": {                     "type": "string",                     "enum": [                         "Table",                         "SQL"                     ],                     "options": {                         "infoText": "Select TABLE if you want to select all columns in a table. Select SQL if you want to define a custom SQL statement to be used to extract data.",                          "hidden": true                     }                 },                 "IncrementalType": {                     "type": "string",                     "description": "Full Extraction or Incremental based on a Watermark Column",                     "enum": [                         "Full",                         "Watermark"                     ],                     "options": {                         "infoText": "Select Full for Full Table Extraction & Watermark for Incremental based on a Watermark column"                     }                 },                 "ExtractionSQL": {                     "type": "string",                     "options": {                                             }                 },                 "TableSchema": {                     "type": "string",                     "options": {                                                 "inputAttributes": {                             "placeholder": "eg. dbo"                         }                     }                 },                 "TableName": {                     "type": "string",                     "options": {                                                 "inputAttributes": {                             "placeholder": "eg. Customer"                         }                     }                 },                 "ChunkField": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "Column to use for chunking. Only use for very large tables. Otherwise leave blank."                         },                         "infoText": "If you want to break an extraction down into multiple files fill out the chunk fields. Otherwise leave blank."                     }                 },                 "ChunkSize": {                     "type": "integer",                     "options": {                         "inputAttributes": {                             "placeholder": ""                         },                         "infoText": "Number of rows to use for each ''chunk'' of data"                     }                 }             },             "required": [                 "Type",                 "IncrementalType"             ]         },         "Target": {             "type": "object",             "properties": {                 "Type": {                     "type": "string",                     "enum": [                         "Parquet"                     ],                     "options": {                         "infoText": "Presently only Parquet is supported",                          "hidden": true                     }                 },                 "RelativePath": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "AwSample/dbo/Customer/{yyyy}/{MM}/{dd}/{hh}/"                         },                         "infoText": "The path of the directory into which you want your extracted data to be written."                     }                 },                 "DataFileName": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "dbo.Customer.parquet"                         },                         "infoText": "Name of the file that will hold the extracted data"                     }                 },                 "SchemaFileName": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "dbo.Customer.json"                         },                         "infoText": "Name of the file that will hold the schema associated with the extracted data."                     }                 }             },             "required": [                 "Type",                 "RelativePath",                 "DataFileName",                 "SchemaFileName"             ]         }     },     "required": [         "Source",         "Target"     ] }', N'{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "type": "object",
  "properties": {
    "TargetRelativePath": {
      "type": "string"
    },
    "IncrementalField": {
      "type": "string"
    },
    "IncrementalColumnType": {
      "type": "string"
    },
    "IncrementalValue": {
      "type": "string"
    }
  },
  "required": [
    "TargetRelativePath",
    "IncrementalField",
    "IncrementalColumnType",
    "IncrementalValue"
  ]
}')
GO
INSERT [dbo].[TaskTypeMapping] ([TaskTypeMappingId], [TaskTypeId], [MappingType], [MappingName], [SourceSystemType], [SourceType], [TargetSystemType], [TargetType], [TaskTypeJson], [ActiveYN], [TaskMasterJsonSchema], [TaskInstanceJsonSchema]) VALUES (15, 8, N'ADF', N'TBD', N'Azure SQL', N'Table', N'Azure Blob', N'Parquet', NULL, 1, NULL, NULL)
GO
INSERT [dbo].[TaskTypeMapping] ([TaskTypeMappingId], [TaskTypeId], [MappingType], [MappingName], [SourceSystemType], [SourceType], [TargetSystemType], [TargetType], [TaskTypeJson], [ActiveYN], [TaskMasterJsonSchema], [TaskInstanceJsonSchema]) VALUES (16, 8, N'ADF', N'TBD', N'Azure SQL', N'Parquet', N'Azure Blob', N'Table', NULL, 1, NULL, NULL)
GO
INSERT [dbo].[TaskTypeMapping] ([TaskTypeMappingId], [TaskTypeId], [MappingType], [MappingName], [SourceSystemType], [SourceType], [TargetSystemType], [TargetType], [TaskTypeJson], [ActiveYN], [TaskMasterJsonSchema], [TaskInstanceJsonSchema]) VALUES (17, 8, N'ADF', N'TBD', N'Azure SQL', N'Table', N'ADLS', N'Parquet', NULL, 1, NULL, NULL)
GO
INSERT [dbo].[TaskTypeMapping] ([TaskTypeMappingId], [TaskTypeId], [MappingType], [MappingName], [SourceSystemType], [SourceType], [TargetSystemType], [TargetType], [TaskTypeJson], [ActiveYN], [TaskMasterJsonSchema], [TaskInstanceJsonSchema]) VALUES (18, 8, N'ADF', N'TBD', N'Azure SQL', N'Parquet', N'ADLS', N'Table', NULL, 1, NULL, NULL)
GO
INSERT [dbo].[TaskTypeMapping] ([TaskTypeMappingId], [TaskTypeId], [MappingType], [MappingName], [SourceSystemType], [SourceType], [TargetSystemType], [TargetType], [TaskTypeJson], [ActiveYN], [TaskMasterJsonSchema], [TaskInstanceJsonSchema]) VALUES (19, 8, N'ADF', N'TBD', N'SQL Server', N'Table', N'Azure Blob', N'Parquet', NULL, 1, NULL, NULL)
GO
INSERT [dbo].[TaskTypeMapping] ([TaskTypeMappingId], [TaskTypeId], [MappingType], [MappingName], [SourceSystemType], [SourceType], [TargetSystemType], [TargetType], [TaskTypeJson], [ActiveYN], [TaskMasterJsonSchema], [TaskInstanceJsonSchema]) VALUES (20, 8, N'ADF', N'TBD', N'SQL Server', N'Parquet', N'Azure Blob', N'Table', NULL, 1, NULL, NULL)
GO
INSERT [dbo].[TaskTypeMapping] ([TaskTypeMappingId], [TaskTypeId], [MappingType], [MappingName], [SourceSystemType], [SourceType], [TargetSystemType], [TargetType], [TaskTypeJson], [ActiveYN], [TaskMasterJsonSchema], [TaskInstanceJsonSchema]) VALUES (21, 2, N'ADF', N'GPL_AzureBlobStorage_Binary_AzureBlobStorage_Binary', N'Azure Blob', N'Parquet', N'Azure Blob', N'Parquet', NULL, 1, N'{   "$schema": "http://json-schema.org/draft-04/schema#",   "type": "object",   "title": "TaskMasterJson",   "properties": {     "Source": {       "type": "object",       "properties": {         "Type": {           "type": "string",           "enum": [             "*"           ],           "default": "*",           "options": {             "infoText": "Only * is supported this time. ",             "hidden": true           }         },         "RelativePath": {           "type": "string",           "description": "Path of the file to be copied. You can use pattern match characters eg. *. See https://docs.microsoft.com/en-us/azure/data-factory/connector-azure-blob-storage?tabs=data-factory#blob-storage-as-a-source-type",           "options": {             "inputAttributes": {               "placeholder": "eg. AwSample/dbo/Customer/{yyyy}/{MM}/{dd}/{hh}/"             },             "infoText": "Path of the file to be copied. You can use pattern match characters eg. *. See https://docs.microsoft.com/en-us/azure/data-factory/connector-azure-blob-storage?tabs=data-factory#blob-storage-as-a-source-type"           }         },         "DataFileName": {           "type": "string",           "description": "Name of the file to be copied. You can use pattern match characters eg. *. See https://docs.microsoft.com/en-us/azure/data-factory/connector-azure-blob-storage?tabs=data-factory#blob-storage-as-a-source-type",           "options": {             "inputAttributes": {               "placeholder": "eg. *.parquet"             },             "infoText": "Name of the file to be copied. You can use pattern match characters eg. *. See https://docs.microsoft.com/en-us/azure/data-factory/connector-azure-blob-storage?tabs=data-factory#blob-storage-as-a-source-type"           }         },         "Recursively": {           "type": "string",           "enum": [             "true",             "false"           ],           "default": "true",           "options": {             "infoText": "Set to true if you want the framework to copy files from subfolders."           }         },         "DeleteAfterCompletion": {           "type": "string",           "enum": [             "true",             "false"           ],           "default": "true",           "options": {             "infoText": "Set to true if you want the framework to remove the source file after a successsful copy."           }         },         "TriggerUsingAzureStorageCache": {           "type": "boolean",           "format": "checkbox",           "enum": [             true,             false           ],           "default": true,           "options": {             "infoText": "Set to true if you want the framework to use the storage cache rather than poll the storage account every time."           }         }       },       "required": [         "Type",         "RelativePath",         "DataFileName",         "Recursively",         "DeleteAfterCompletion"       ]     },     "Target": {       "type": "object",       "properties": {         "Type": {           "type": "string",           "enum": [             "*"           ],           "default": "*",           "options": {             "infoText": "Only * is supported this time. ",              "hidden": true           }         },         "RelativePath": {           "type": "string",           "options": {             "inputAttributes": {               "placeholder": "eg. AwSample/dbo/Customer/{yyyy}/{MM}/{dd}/{hh}/"             },             "infoText": "Path of the target directory. You can use pattern match characters eg. *. See https://docs.microsoft.com/en-us/azure/data-factory/connector-azure-blob-storage?tabs=data-factory#blob-storage-as-a-source-type"           }         },         "DataFileName": {           "type": "string",           "options": {             "inputAttributes": {               "placeholder": "eg. Customer.parquet"             },             "infoText": "Name of the target file. Leave this blank if your are using pattern matching to copy multiple files from source."           }         }       },       "required": [         "Type",         "RelativePath",         "DataFileName"       ]     }   },   "required": [     "Source",     "Target"   ] }', NULL)
GO
INSERT [dbo].[TaskTypeMapping] ([TaskTypeMappingId], [TaskTypeId], [MappingType], [MappingName], [SourceSystemType], [SourceType], [TargetSystemType], [TargetType], [TaskTypeJson], [ActiveYN], [TaskMasterJsonSchema], [TaskInstanceJsonSchema]) VALUES (22, 2, N'ADF', N'GPL_AzureBlobStorage_Binary_AzureBlobFS_Binary', N'Azure Blob', N'Parquet', N'ADLS', N'Parquet', NULL, 1, N'{   "$schema": "http://json-schema.org/draft-04/schema#",   "type": "object",   "title": "TaskMasterJson",   "properties": {     "Source": {       "type": "object",       "properties": {         "Type": {           "type": "string",           "enum": [             "*"           ],           "default": "*",           "options": {             "infoText": "Only * is supported this time. ",             "hidden": true           }         },         "RelativePath": {           "type": "string",           "description": "Path of the file to be copied. You can use pattern match characters eg. *. See https://docs.microsoft.com/en-us/azure/data-factory/connector-azure-blob-storage?tabs=data-factory#blob-storage-as-a-source-type",           "options": {             "inputAttributes": {               "placeholder": "eg. AwSample/dbo/Customer/{yyyy}/{MM}/{dd}/{hh}/"             },             "infoText": "Path of the file to be copied. You can use pattern match characters eg. *. See https://docs.microsoft.com/en-us/azure/data-factory/connector-azure-blob-storage?tabs=data-factory#blob-storage-as-a-source-type"           }         },         "DataFileName": {           "type": "string",           "description": "Name of the file to be copied. You can use pattern match characters eg. *. See https://docs.microsoft.com/en-us/azure/data-factory/connector-azure-blob-storage?tabs=data-factory#blob-storage-as-a-source-type",           "options": {             "inputAttributes": {               "placeholder": "eg. *.parquet"             },             "infoText": "Name of the file to be copied. You can use pattern match characters eg. *. See https://docs.microsoft.com/en-us/azure/data-factory/connector-azure-blob-storage?tabs=data-factory#blob-storage-as-a-source-type"           }         },         "Recursively": {           "type": "string",           "enum": [             "true",             "false"           ],           "default": "true",           "options": {             "infoText": "Set to true if you want the framework to copy files from subfolders."           }         },         "DeleteAfterCompletion": {           "type": "string",           "enum": [             "true",             "false"           ],           "default": "true",           "options": {             "infoText": "Set to true if you want the framework to remove the source file after a successsful copy."           }         },         "TriggerUsingAzureStorageCache": {           "type": "boolean",           "format": "checkbox",           "enum": [             true,             false           ],           "default": true,           "options": {             "infoText": "Set to true if you want the framework to use the storage cache rather than poll the storage account every time."           }         }       },       "required": [         "Type",         "RelativePath",         "DataFileName",         "Recursively",         "DeleteAfterCompletion"       ]     },     "Target": {       "type": "object",       "properties": {         "Type": {           "type": "string",           "enum": [             "*"           ],           "default": "*",           "options": {             "infoText": "Only * is supported this time. ",              "hidden": true           }         },         "RelativePath": {           "type": "string",           "options": {             "inputAttributes": {               "placeholder": "eg. AwSample/dbo/Customer/{yyyy}/{MM}/{dd}/{hh}/"             },             "infoText": "Path of the target directory. You can use pattern match characters eg. *. See https://docs.microsoft.com/en-us/azure/data-factory/connector-azure-blob-storage?tabs=data-factory#blob-storage-as-a-source-type"           }         },         "DataFileName": {           "type": "string",           "options": {             "inputAttributes": {               "placeholder": "eg. Customer.parquet"             },             "infoText": "Name of the target file. Leave this blank if your are using pattern matching to copy multiple files from source."           }         }       },       "required": [         "Type",         "RelativePath",         "DataFileName"       ]     }   },   "required": [     "Source",     "Target"   ] }', NULL)
GO
INSERT [dbo].[TaskTypeMapping] ([TaskTypeMappingId], [TaskTypeId], [MappingType], [MappingName], [SourceSystemType], [SourceType], [TargetSystemType], [TargetType], [TaskTypeJson], [ActiveYN], [TaskMasterJsonSchema], [TaskInstanceJsonSchema]) VALUES (23, 2, N'ADF', N'GPL_AzureBlobFS_Binary_AzureBlobStorage_Binary', N'ADLS', N'Parquet', N'Azure Blob', N'Parquet', NULL, 1, N'{   "$schema": "http://json-schema.org/draft-04/schema#",   "type": "object",   "title": "TaskMasterJson",   "properties": {     "Source": {       "type": "object",       "properties": {         "Type": {           "type": "string",           "enum": [             "*"           ],           "default": "*",           "options": {             "infoText": "Only * is supported this time. ",             "hidden": true           }         },         "RelativePath": {           "type": "string",           "description": "Path of the file to be copied. You can use pattern match characters eg. *. See https://docs.microsoft.com/en-us/azure/data-factory/connector-azure-blob-storage?tabs=data-factory#blob-storage-as-a-source-type",           "options": {             "inputAttributes": {               "placeholder": "eg. AwSample/dbo/Customer/{yyyy}/{MM}/{dd}/{hh}/"             },             "infoText": "Path of the file to be copied. You can use pattern match characters eg. *. See https://docs.microsoft.com/en-us/azure/data-factory/connector-azure-blob-storage?tabs=data-factory#blob-storage-as-a-source-type"           }         },         "DataFileName": {           "type": "string",           "description": "Name of the file to be copied. You can use pattern match characters eg. *. See https://docs.microsoft.com/en-us/azure/data-factory/connector-azure-blob-storage?tabs=data-factory#blob-storage-as-a-source-type",           "options": {             "inputAttributes": {               "placeholder": "eg. *.parquet"             },             "infoText": "Name of the file to be copied. You can use pattern match characters eg. *. See https://docs.microsoft.com/en-us/azure/data-factory/connector-azure-blob-storage?tabs=data-factory#blob-storage-as-a-source-type"           }         },         "Recursively": {           "type": "string",           "enum": [             "true",             "false"           ],           "default": "true",           "options": {             "infoText": "Set to true if you want the framework to copy files from subfolders."           }         },         "DeleteAfterCompletion": {           "type": "string",           "enum": [             "true",             "false"           ],           "default": "true",           "options": {             "infoText": "Set to true if you want the framework to remove the source file after a successsful copy."           }         },         "TriggerUsingAzureStorageCache": {           "type": "boolean",           "format": "checkbox",           "enum": [             true,             false           ],           "default": true,           "options": {             "infoText": "Set to true if you want the framework to use the storage cache rather than poll the storage account every time."           }         }       },       "required": [         "Type",         "RelativePath",         "DataFileName",         "Recursively",         "DeleteAfterCompletion"       ]     },     "Target": {       "type": "object",       "properties": {         "Type": {           "type": "string",           "enum": [             "*"           ],           "default": "*",           "options": {             "infoText": "Only * is supported this time. ",              "hidden": true           }         },         "RelativePath": {           "type": "string",           "options": {             "inputAttributes": {               "placeholder": "eg. AwSample/dbo/Customer/{yyyy}/{MM}/{dd}/{hh}/"             },             "infoText": "Path of the target directory. You can use pattern match characters eg. *. See https://docs.microsoft.com/en-us/azure/data-factory/connector-azure-blob-storage?tabs=data-factory#blob-storage-as-a-source-type"           }         },         "DataFileName": {           "type": "string",           "options": {             "inputAttributes": {               "placeholder": "eg. Customer.parquet"             },             "infoText": "Name of the target file. Leave this blank if your are using pattern matching to copy multiple files from source."           }         }       },       "required": [         "Type",         "RelativePath",         "DataFileName"       ]     }   },   "required": [     "Source",     "Target"   ] }', NULL)
GO
INSERT [dbo].[TaskTypeMapping] ([TaskTypeMappingId], [TaskTypeId], [MappingType], [MappingName], [SourceSystemType], [SourceType], [TargetSystemType], [TargetType], [TaskTypeJson], [ActiveYN], [TaskMasterJsonSchema], [TaskInstanceJsonSchema]) VALUES (24, 2, N'ADF', N'GPL_AzureBlobFS_Binary_AzureBlobFS_Binary', N'ADLS', N'Parquet', N'ADLS', N'Parquet', NULL, 1, N'{   "$schema": "http://json-schema.org/draft-04/schema#",   "type": "object",   "title": "TaskMasterJson",   "properties": {     "Source": {       "type": "object",       "properties": {         "Type": {           "type": "string",           "enum": [             "*"           ],           "default": "*",           "options": {             "infoText": "Only * is supported this time. ",             "hidden": true           }         },         "RelativePath": {           "type": "string",           "description": "Path of the file to be copied. You can use pattern match characters eg. *. See https://docs.microsoft.com/en-us/azure/data-factory/connector-azure-blob-storage?tabs=data-factory#blob-storage-as-a-source-type",           "options": {             "inputAttributes": {               "placeholder": "eg. AwSample/dbo/Customer/{yyyy}/{MM}/{dd}/{hh}/"             },             "infoText": "Path of the file to be copied. You can use pattern match characters eg. *. See https://docs.microsoft.com/en-us/azure/data-factory/connector-azure-blob-storage?tabs=data-factory#blob-storage-as-a-source-type"           }         },         "DataFileName": {           "type": "string",           "description": "Name of the file to be copied. You can use pattern match characters eg. *. See https://docs.microsoft.com/en-us/azure/data-factory/connector-azure-blob-storage?tabs=data-factory#blob-storage-as-a-source-type",           "options": {             "inputAttributes": {               "placeholder": "eg. *.parquet"             },             "infoText": "Name of the file to be copied. You can use pattern match characters eg. *. See https://docs.microsoft.com/en-us/azure/data-factory/connector-azure-blob-storage?tabs=data-factory#blob-storage-as-a-source-type"           }         },         "Recursively": {           "type": "string",           "enum": [             "true",             "false"           ],           "default": "true",           "options": {             "infoText": "Set to true if you want the framework to copy files from subfolders."           }         },         "DeleteAfterCompletion": {           "type": "string",           "enum": [             "true",             "false"           ],           "default": "true",           "options": {             "infoText": "Set to true if you want the framework to remove the source file after a successsful copy."           }         },         "TriggerUsingAzureStorageCache": {           "type": "boolean",           "format": "checkbox",           "enum": [             true,             false           ],           "default": true,           "options": {             "infoText": "Set to true if you want the framework to use the storage cache rather than poll the storage account every time."           }         }       },       "required": [         "Type",         "RelativePath",         "DataFileName",         "Recursively",         "DeleteAfterCompletion"       ]     },     "Target": {       "type": "object",       "properties": {         "Type": {           "type": "string",           "enum": [             "*"           ],           "default": "*",           "options": {             "infoText": "Only * is supported this time. ",              "hidden": true           }         },         "RelativePath": {           "type": "string",           "options": {             "inputAttributes": {               "placeholder": "eg. AwSample/dbo/Customer/{yyyy}/{MM}/{dd}/{hh}/"             },             "infoText": "Path of the target directory. You can use pattern match characters eg. *. See https://docs.microsoft.com/en-us/azure/data-factory/connector-azure-blob-storage?tabs=data-factory#blob-storage-as-a-source-type"           }         },         "DataFileName": {           "type": "string",           "options": {             "inputAttributes": {               "placeholder": "eg. Customer.parquet"             },             "infoText": "Name of the target file. Leave this blank if your are using pattern matching to copy multiple files from source."           }         }       },       "required": [         "Type",         "RelativePath",         "DataFileName"       ]     }   },   "required": [     "Source",     "Target"   ] }', NULL)
GO
INSERT [dbo].[TaskTypeMapping] ([TaskTypeMappingId], [TaskTypeId], [MappingType], [MappingName], [SourceSystemType], [SourceType], [TargetSystemType], [TargetType], [TaskTypeJson], [ActiveYN], [TaskMasterJsonSchema], [TaskInstanceJsonSchema]) VALUES (25, 7, N'ADF', N'AzureSqlSource_SQL', N'Azure SQL', N'StoredProcedure', N'Azure SQL', N'StoredProcedure', NULL, 1, N'{   "$schema": "http://json-schema.org/draft-04/schema#",   "type": "object",   "properties": {     "Source": {       "type": "object",       "properties": {         "Type": {           "type": "string",           "enum": [             "StoredProcedure"           ],           "options": {             "hidden": true           }         },         "TableSchema": {           "type": "string"         },         "TableName": {           "type": "string"         },         "StoredProcedure": {           "type": "string"         },         "Parameters": {           "type": "string"         }       },       "required": [         "Type",         "TableSchema",         "TableName",         "StoredProcedure",         "Parameters"       ]     },     "Target": {       "type": "object",       "properties": {         "Type": {           "type": "string",           "options": {             "hidden": true           }         }       },       "required": [         "Type"       ]     }   },   "required": [     "Source",     "Target"   ] }', NULL)
GO
INSERT [dbo].[TaskTypeMapping] ([TaskTypeMappingId], [TaskTypeId], [MappingType], [MappingName], [SourceSystemType], [SourceType], [TargetSystemType], [TargetType], [TaskTypeJson], [ActiveYN], [TaskMasterJsonSchema], [TaskInstanceJsonSchema]) VALUES (26, 9, N'AF', N'AZ_Storage_SAS_Uri_SMTP_Email', N'Azure Blob', N'SASUri', N'SendGrid', N'Email', NULL, 1, NULL, N'{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "type": "object",
  "properties": {
    "SourceRelativePath": {
      "type": "string"
    }
  },
  "required": [
    "SourceRelativePath"
  ]
}')
GO
INSERT [dbo].[TaskTypeMapping] ([TaskTypeMappingId], [TaskTypeId], [MappingType], [MappingName], [SourceSystemType], [SourceType], [TargetSystemType], [TargetType], [TaskTypeJson], [ActiveYN], [TaskMasterJsonSchema], [TaskInstanceJsonSchema]) VALUES (27, 10, N'AF', N'AZ_Storage_Cache_File_List', N'Azure Blob', N'Filelist', N'Azure SQL', N'Table', NULL, 1, N'{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "type": "object",
  "properties": {
    "Source": {
      "type": "object",
      "properties": {
        "Type": {
          "type": "string"
        },
        "StorageAccountToken": {
          "type": "string"
        }
      },
      "required": [
        "Type",
        "StorageAccountToken"
      ]
    },
    "Target": {
      "type": "object",
      "properties": {
        "Type": {
          "type": "string"
        }
      },
      "required": [
        "Type"
      ]
    }
  },
  "required": [
    "Source",
    "Target"
  ]
}', NULL)
GO
INSERT [dbo].[TaskTypeMapping] ([TaskTypeMappingId], [TaskTypeId], [MappingType], [MappingName], [SourceSystemType], [SourceType], [TargetSystemType], [TargetType], [TaskTypeJson], [ActiveYN], [TaskMasterJsonSchema], [TaskInstanceJsonSchema]) VALUES (29, 2, N'ADF', N'GPL_AzureBlobStorage_Binary_AzureBlobStorage_Binary', N'Azure Blob', N'*', N'Azure Blob', N'*', NULL, 1, N'{   "$schema": "http://json-schema.org/draft-04/schema#",   "type": "object",   "title": "TaskMasterJson",   "properties": {     "Source": {       "type": "object",       "properties": {         "Type": {           "type": "string",           "enum": [             "*"           ],           "default": "*",           "options": {             "infoText": "Only * is supported this time. ",             "hidden": true           }         },         "RelativePath": {           "type": "string",           "description": "Path of the file to be copied. You can use pattern match characters eg. *. See https://docs.microsoft.com/en-us/azure/data-factory/connector-azure-blob-storage?tabs=data-factory#blob-storage-as-a-source-type",           "options": {             "inputAttributes": {               "placeholder": "eg. AwSample/dbo/Customer/{yyyy}/{MM}/{dd}/{hh}/"             },             "infoText": "Path of the file to be copied. You can use pattern match characters eg. *. See https://docs.microsoft.com/en-us/azure/data-factory/connector-azure-blob-storage?tabs=data-factory#blob-storage-as-a-source-type"           }         },         "DataFileName": {           "type": "string",           "description": "Name of the file to be copied. You can use pattern match characters eg. *. See https://docs.microsoft.com/en-us/azure/data-factory/connector-azure-blob-storage?tabs=data-factory#blob-storage-as-a-source-type",           "options": {             "inputAttributes": {               "placeholder": "eg. *.parquet"             },             "infoText": "Name of the file to be copied. You can use pattern match characters eg. *. See https://docs.microsoft.com/en-us/azure/data-factory/connector-azure-blob-storage?tabs=data-factory#blob-storage-as-a-source-type"           }         },         "Recursively": {           "type": "string",           "enum": [             "true",             "false"           ],           "default": "true",           "options": {             "infoText": "Set to true if you want the framework to copy files from subfolders."           }         },         "DeleteAfterCompletion": {           "type": "string",           "enum": [             "true",             "false"           ],           "default": "true",           "options": {             "infoText": "Set to true if you want the framework to remove the source file after a successsful copy."           }         },         "TriggerUsingAzureStorageCache": {           "type": "boolean",           "format": "checkbox",           "enum": [             true,             false           ],           "default": true,           "options": {             "infoText": "Set to true if you want the framework to use the storage cache rather than poll the storage account every time."           }         }       },       "required": [         "Type",         "RelativePath",         "DataFileName",         "Recursively",         "DeleteAfterCompletion"       ]     },     "Target": {       "type": "object",       "properties": {         "Type": {           "type": "string",           "enum": [             "*"           ],           "default": "*",           "options": {             "infoText": "Only * is supported this time. ",              "hidden": true           }         },         "RelativePath": {           "type": "string",           "options": {             "inputAttributes": {               "placeholder": "eg. AwSample/dbo/Customer/{yyyy}/{MM}/{dd}/{hh}/"             },             "infoText": "Path of the target directory. You can use pattern match characters eg. *. See https://docs.microsoft.com/en-us/azure/data-factory/connector-azure-blob-storage?tabs=data-factory#blob-storage-as-a-source-type"           }         },         "DataFileName": {           "type": "string",           "options": {             "inputAttributes": {               "placeholder": "eg. Customer.parquet"             },             "infoText": "Name of the target file. Leave this blank if your are using pattern matching to copy multiple files from source."           }         }       },       "required": [         "Type",         "RelativePath",         "DataFileName"       ]     }   },   "required": [     "Source",     "Target"   ] }', N'{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "type": "object",
  "properties": {
    "SourceRelativePath": {
      "type": "string"
    },
    "TargetRelativePath": {
      "type": "string"
    }
  },
  "required": [
    "SourceRelativePath",
    "TargetRelativePath"
  ]
}')
GO
INSERT [dbo].[TaskTypeMapping] ([TaskTypeMappingId], [TaskTypeId], [MappingType], [MappingName], [SourceSystemType], [SourceType], [TargetSystemType], [TargetType], [TaskTypeJson], [ActiveYN], [TaskMasterJsonSchema], [TaskInstanceJsonSchema]) VALUES (30, 11, N'AF', N'Cache_File_List_To_Email_Alert', N'Azure Blob', N'*', N'SendGrid', N'*', NULL, 1, N'{
    "$schema": "http://json-schema.org/draft-07/schema",
    "type": "object",
    "required": [
        "Source",
        "Target"
    ],
    "properties": {
        "Source": {
            "type": "object",
            "required": [
                "Type",
                "RelativePath",
                "DataFileName",
                "Recursively",
                "TriggerUsingAzureStorageCache",
                "DeleteAfterCompletion"
            ],
            "properties": {
                "Type": {
                    "type": "string"
                },
                "RelativePath": {
                    "type": "string"
                },
                "DataFileName": {
                    "type": "string"
                },
                "Recursively": {
                    "type": "string"
                },
                "TriggerUsingAzureStorageCache": {
                    "type": "boolean"
                },
                "DeleteAfterCompletion": {
                    "type": "string"
                }
            },
            "additionalProperties": true
        },
        "Target": {
            "type": "object",
            "required": [
                "Type",
                "Alerts"
            ],
            "properties": {
                "Type": {
                    "type": "string"
                },
                "Alerts": {
                    "type": "array",
                    "additionalItems": true,
                    "items": {
                        "anyOf": [
                            {
                                "type": "object",
                                "required": [
                                    "AlertCategory",
                                    "EmailTemplateFileName",
                                    "EmailRecepient",
                                    "EmailSubject",
                                    "EmailRecepientName"
                                ],
                                "properties": {
                                    "AlertCategory": {
                                        "type": "string"
                                    },
                                    "EmailTemplateFileName": {
                                        "type": "string"
                                    },
                                    "EmailRecepient": {
                                        "type": "string"
                                    },
                                    "EmailSubject": {
                                        "type": "string"
                                    },
                                    "EmailRecepientName": {
                                        "type": "string"
                                    }
                                },
                                "additionalProperties": true
                            }
                        ]
                    }
                }
            },
            "additionalProperties": true
        }
    },
    "additionalProperties": true
}', N'{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "type": "object",
  "properties": {
    "SourceRelativePath": {
      "type": "string"
    }
  },
  "required": [
    "SourceRelativePath"
  ]
}')
GO
INSERT [dbo].[TaskTypeMapping] ([TaskTypeMappingId], [TaskTypeId], [MappingType], [MappingName], [SourceSystemType], [SourceType], [TargetSystemType], [TargetType], [TaskTypeJson], [ActiveYN], [TaskMasterJsonSchema], [TaskInstanceJsonSchema]) VALUES (31, 3, N'ADF', N'GPL_AzureSqlTable_NA_AzureBlobStorage_Parquet', N'Azure SQL', N'SQL', N'Azure Blob', N'Parquet', NULL, 1, N'{     "$schema": "http://json-schema.org/draft-04/schema#",     "type": "object",     "title": "TaskMasterJson",     "properties": {         "Source": {             "type": "object",             "properties": {                 "Type": {                     "type": "string",                                         "enum": [                         "Table",                         "SQL"                     ],                     "options": {                         "hidden":true,                         "infoText": "Select TABLE if you want to select all columns in a table. Select SQL if you want to define a custom SQL statement to be used to extract data."                     }                 },                 "IncrementalType": {                     "type": "string",                     "description": "Full Extraction or Incremental based on a Watermark Column",                     "enum": [                         "Full",                         "Watermark"                     ],                     "options": {                         "infoText": "Select Full for Full Table Extraction & Watermark for Incremental based on a Watermark column"                     },                     "default":"Table"                 },                 "ExtractionSQL": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "eg. Select top 100 * from Customer"                         },                         "infoText": "A custom SQL statement that you wish to be used to extract the data. **Note that this is ignored if the Source Type is ''Table''"                     },                     "default":""                 },                 "TableSchema": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "eg. dbo"                         },                          "infoText": "The schema of the table to extract. **Note that this is ignored if the Source Type is ''SQL''"                     },                     "default":""                  },                 "TableName": {                     "type": "string",                     "options": {                                                 "inputAttributes": {                             "placeholder": "eg. Customer"                         },                          "infoText": "The name of the table to extract. **Note that this is ignored if the Source Type is ''SQL''"                     },                     "default":""                 },                 "ChunkField": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "eg. Customer Id"                         },                         "infoText": "If you want to break an extraction down into multiple files fill out the chunk fields. Otherwise leave blank."                     },                     "default":""                 },                 "ChunkSize": {                     "type": "integer",                     "options": {                         "inputAttributes": {                             "placeholder": 0                                                 },                                                 "infoText": "Number of rows to use for each ''chunk'' of data."                     },                     "default": 0                 }             },             "required": [                 "Type",                 "IncrementalType"             ]         },         "Target": {             "type": "object",             "properties": {                 "Type": {                     "type": "string",                                        "enum": [                         "Parquet"                     ],                     "options": {                         "hidden":true,                         "infoText": "Presently only Parquet is supported"                     }                 },                 "RelativePath": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "AwSample/dbo/Customer/{yyyy}/{MM}/{dd}/{hh}/"                         },                         "infoText": "The path of the directory into which you want your extracted data to be written. You can use placeholders such (eg. {yyyy}/{MM}/{dd}/{hh}/). "                     }                 },                 "DataFileName": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "dbo.Customer.parquet"                         },                         "infoText": "Name of the file that will hold the extracted data"                     }                 },                 "SchemaFileName": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "dbo.Customer.json"                         },                         "infoText": "Name of the file that will hold the schema associated with the extracted data."                     }                 }             },             "required": [                 "Type",                 "RelativePath",                 "DataFileName",                 "SchemaFileName"             ]         }     },     "required": [         "Source",         "Target"     ] }', N'
{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "type": "object",
  "properties": {
    "TargetRelativePath": {
      "type": "string"
    },
    "IncrementalField": {
      "type": "string"
    },
    "IncrementalColumnType": {
      "type": "string"
    },
    "IncrementalValue": {
      "type": "string"
    }
  },
  "required": [
    "TargetRelativePath"
  ]
}')
GO
INSERT [dbo].[TaskTypeMapping] ([TaskTypeMappingId], [TaskTypeId], [MappingType], [MappingName], [SourceSystemType], [SourceType], [TargetSystemType], [TargetType], [TaskTypeJson], [ActiveYN], [TaskMasterJsonSchema], [TaskInstanceJsonSchema]) VALUES (33, 1, N'ADF', N'GPL_AzureBlobFS_Excel_AzureSqlTable_NA', N'ADLS', N'Excel', N'Azure SQL', N'Table', NULL, 1, N'{
   "$schema": "http://json-schema.org/draft-04/schema#",
   "properties": {
      "Source": {
         "properties": {
            "DataFileName": {
               "options": {
                  "infoText": "Name of the file to be imported.",
                  "inputAttributes": {
                     "placeholder": "eg. Customer.xlsx"
                  }
               },
               "type": "string"
            },
            "FirstRowAsHeader": {
               "default": "true",
               "enum": [
                  "true",
                  "false"
               ],
               "options": {
                  "infoText": "Set to true if you want the first row of data to be used as column names."
               },
               "type": "string"
            },
            "RelativePath": {
               "options": {
                  "infoText": "Path of the file to be imported.",
                  "inputAttributes": {
                     "placeholder": "eg. AwSample/dbo/Customer/{yyyy}/{MM}/{dd}/{hh}/"
                  }
               },
               "type": "string"
            },
            "SchemaFileName": {
               "options": {
                  "infoText": "Name of the schema file to use when generating the target table. *Note that if you do not provide a schema file then the schema will be automatically inferred based on the source data.",
                  "inputAttributes": {
                     "placeholder": "eg. Customer_Schema.json"
                  }
               },
               "type": "string"
            },
            "SheetName": {
               "options": {
                  "infoText": "Name of the Excel Worksheet that you wish to import",
                  "inputAttributes": {
                     "placeholder": "eg. Sheet1"
                  }
               },
               "type": "string"
            },
            "Type": {
               "enum": [
                  "Excel"
               ],
               "options": {
                  "hidden": true
               },
               "type": "string"
            }
         },
         "required": [
            "Type",
            "RelativePath",
            "DataFileName",
            "SchemaFileName",
            "FirstRowAsHeader",
            "SheetName"
         ],
         "type": "object"
      },
      "Target": {
         "properties": {
            "AutoCreateTable": {
               "default": "true",
               "enum": [
                  "true",
                  "false"
               ],
               "options": {
                  "infoText": "Set to true if you want the framework to automatically create the target table if it does not exist. If this is false and the target table does not exist then the task will fail with an error."
               },
               "type": "string"
            },
            "AutoGenerateMerge": {
               "default": "true",
               "enum": [
                  "true",
                  "false"
               ],
               "options": {
                  "infoText": "Set to true if you want the framework to autogenerate the merge based on the primary key of the target table."
               },
               "type": "string"
            },
            "MergeSQL": {
               "format": "sql",
               "options": {
                  "ace": {
                     "tabSize": 2,
                     "useSoftTabs": true,
                     "wrap": true
                  },
                  "infoText": "A custom merge statement to exectute. Note that this will be ignored if `AutoGenerateMerge` is true. Click in the box below to view or edit "
               },
               "type": "string"
            },
            "PostCopySQL": {
               "options": {
                  "infoText": "A SQL statement that you wish to be applied after merging the staging table and the final table",
                  "inputAttributes": {
                     "placeholder": "eg. Delete from dbo.Customer where Active = 0"
                  }
               },
               "type": "string"
            },
            "PreCopySQL": {
               "options": {
                  "infoText": "A SQL statement that you wish to be applied prior to merging the staging table and the final table",
                  "inputAttributes": {
                     "placeholder": "eg. Delete from dbo.StgCustomer where Active = 0"
                  }
               },
               "type": "string"
            },
            "StagingTableName": {
               "options": {
                  "infoText": "Table name for the transient table in which data will first be staged before being merged into final target table.",
                  "inputAttributes": {
                     "placeholder": "eg. StgCustomer"
                  }
               },
               "type": "string"
            },
            "StagingTableSchema": {
               "options": {
                  "infoText": "Schema for the transient table in which data will first be staged before being merged into final target table.",
                  "inputAttributes": {
                     "placeholder": "eg. dbo"
                  }
               },
               "type": "string"
            },
            "TableName": {
               "options": {
                  "infoText": "Name of the final target table.",
                  "inputAttributes": {
                     "placeholder": "eg. Customer"
                  }
               },
               "type": "string"
            },
            "TableSchema": {
               "options": {
                  "infoText": "Schema of the final target table. Note that this must exist in the target database as it will not be autogenerated.",
                  "inputAttributes": {
                     "placeholder": "eg. dbo"
                  }
               },
               "type": "string"
            },
            "Type": {
               "enum": [
                  "Table"
               ],
               "options": {
                  "hidden": true
               },
               "type": "string"
            }
         },
         "required": [
            "Type",
            "StagingTableSchema",
            "StagingTableName",
            "AutoCreateTable",
            "TableSchema",
            "TableName",
            "PreCopySQL",
            "PostCopySQL",
            "AutoGenerateMerge",
            "MergeSQL"
         ],
         "type": "object"
      }
   },
   "required": [
      "Source",
      "Target"
   ],
   "title": "TaskMasterJson",
   "type": "object"
}
', NULL)
GO
INSERT [dbo].[TaskTypeMapping] ([TaskTypeMappingId], [TaskTypeId], [MappingType], [MappingName], [SourceSystemType], [SourceType], [TargetSystemType], [TargetType], [TaskTypeJson], [ActiveYN], [TaskMasterJsonSchema], [TaskInstanceJsonSchema]) VALUES (34, 1, N'ADF', N'GPL_AzureBlobStorage_DelimitedText_AzureSqlTable_NA', N'ADLS', N'Csv', N'Azure SQL', N'Table', N'{}', 1, N'{     "$schema": "http://json-schema.org/draft-04/schema#",     "type": "object",     "title": "TaskMasterJson",     "properties": {         "Source": {             "type": "object",             "properties": {                 "Type": {                     "type": "string",                                         "enum": [                         "Csv"                     ],                      "options" : {                         "hidden": true                     }                 },                 "RelativePath": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "eg. AwSample/dbo/Customer/{yyyy}/{MM}/{dd}/{hh}/"                         },                         "infoText": "Path of the file to be imported."                     }                 },                 "DataFileName": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "eg. Customer.xlsx"                         },                         "infoText": "Name of the file to be imported."                     }                 },                 "SkipLineCount": {                     "type": "integer",                                         "default": 0,                     "options": {                                                 "infoText": "Number of lines to skip."                     }                 },                 "FirstRowAsHeader": {                     "type": "string",                     "enum": [                         "true",                         "false"                     ],                     "default": "true",                     "options": {                                                 "infoText": "Set to true if you want the first row of data to be used as column names."                     }                 },                  "MaxConcorrentConnections": {                     "type": "integer",                     "default": 100,                     "options": {                                                 "infoText": "The upper limit of concurrent connections established to the data store during the activity run. Specify a value only when you want to limit concurrent connections"                     }                 }                             },             "required": [                 "Type",                 "RelativePath",                 "DataFileName",                 "SkipLineCount",                 "FirstRowAsHeader",                 "MaxConcorrentConnections"             ]         },         "Target": {             "type": "object",             "properties": {                 "Type": {                     "type": "string",                     "enum": [                         "Table"                     ],                      "options" : {                         "hidden": true                     }                 },                 "StagingTableSchema": {                     "type": "string",                     "options": {                                                 "inputAttributes": {                             "placeholder": "eg. dbo"                         },                         "infoText": "Schema for the transient table in which data will first be staged before being merged into final target table."                     }                 },                 "StagingTableName": {                     "type": "string",                     "options": {                                             "inputAttributes": {                             "placeholder": "eg. StgCustomer"                         },                         "infoText": "Table name for the transient table in which data will first be staged before being merged into final target table."                     }                 },                 "AutoCreateTable": {                     "type": "string",                     "enum": [                         "true",                         "false"                     ],                     "default": "true",                     "options": {                         "infoText": "Set to true if you want the framework to automatically create the target table if it does not exist. If this is false and the target table does not exist then the task will fail with an error."                     }                 },                 "TableSchema": {                     "type": "string",                     "options": {                                                 "inputAttributes": {                             "placeholder": "eg. dbo"                         },                         "infoText": "Schema of the final target table."                     }                 },                 "TableName": {                     "type": "string",                     "options": {                                                 "inputAttributes": {                             "placeholder": "eg. Customer"                         },                         "infoText": "Name of the final target table."                     }                 },                 "PreCopySQL": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "eg. Delete from dbo.StgCustomer where Active = 0"                         },                         "infoText": "A SQL statement that you wish to be applied prior to merging the staging table and the final table"                     }                 },                 "PostCopySQL": {                     "type": "string",                     "options": {                         "inputAttributes": {                             "placeholder": "eg. Delete from dbo.Customer where Active = 0"                         },                         "infoText": "A SQL statement that you wish to be applied after merging the staging table and the final table"                     }                 },                 "AutoGenerateMerge": {                     "type": "string",                     "enum": [                         "true",                         "false"                     ],                     "default": "true",                     "options": {                         "infoText": "Set to true if you want the framework to autogenerate the merge based on the primary key of the target table."                     }                 },                 "MergeSQL": {                     "type": "string",                     "format": "sql",                                                           "options": {                                                                         "infoText": "A custom merge statement to exectute. Note that this will be ignored if ''AutoGenerateMerge'' is true. Click in the box below to view or edit ",                         "ace": {                                                         "tabSize": 2,                             "useSoftTabs": true,                             "wrap": true                           }                     }                 },                  "DynamicMapping": {                     "type": "object",                                                                               "options": {                                                                         "infoText": "",                         "hidden": true                     }                 }             },             "required": [                 "Type",                 "StagingTableSchema",                 "StagingTableName",                 "AutoCreateTable",                 "TableSchema",                 "TableName",                 "PreCopySQL",                 "PostCopySQL",                 "AutoGenerateMerge",                  "DynamicMapping"             ]         }     },     "required": [         "Source",         "Target"     ] }', NULL)
GO
SET IDENTITY_INSERT [dbo].[TaskTypeMapping] OFF
GO
